{"version":3,"sources":["constants.js","RecipeCard/index.js","RecipeGrid/index.js","Header/index.js","HomePage/index.js","SingleRecipe/index.js","App.js","serviceWorker.js","index.js"],"names":["BASE_URL","RecipeCard","props","openSingleRecipe","bind","this","title","field_images","field_summary","openRecipe","img","split","slice","trim","className","src","alt","onClick","f","index","Component","RecipeGrid","results","map","recipe","key","Header","navigate","openPage","id","href","page","HomePage","getHomePage","SingleRecipe","state","initialIndex","nextRecipe","previousRecipe","field_ingredients","body","ingredients","ingredient","dangerouslySetInnerHTML","__html","length","window","location","hash","setState","App","getRecipes","getBody","fetch","then","response","json","event","recipe_num","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b277f0a9.chunk.js","sourcesContent":["export const BASE_URL = \"http://gtest.dev.wwbtc.com\";\n// export const BASE_URL = \"http://localhost:8000\"\nexport const API = \"/json\"","import React, { Component } from 'react';\nimport { BASE_URL } from '../constants';\nimport './index.css'\n\nexport class RecipeCard extends Component {\n  constructor(props) {\n    super(props);\n    this.openSingleRecipe = this.openSingleRecipe.bind(this)\n  }\n\n\n  render() {\n    let {title, field_images, field_summary, openRecipe} = this.props;\n    let img = field_images.split(',').slice(-1)[0].trim();\n    return(\n      <div className=\"recipe-card\">\n        <img src={`${BASE_URL}${img}`} className=\"recipe-card-img\" alt={title}></img>\n        <button className=\"recipe-card-title\" onClick={this.openSingleRecipe(openRecipe)}>\n          { title }\n        </button>\n        <div className=\"recipe-card-summary\">\n          { field_summary }\n        </div>\n      </div>\n    )\n  }\n\n  openSingleRecipe(f) {\n    return () => {\n       f(this.props.index) \n      }\n  }\n}","import React from 'react';\nimport './index.css'\nimport { RecipeCard } from '../RecipeCard'\n\nexport const RecipeGrid = ({results, openRecipe}) => {\n  return(\n    results ?\n    <div className=\"recipe-card-grid\">\n      {\n        results.map((recipe, index) =>\n          <div key={index} className=\"App-recipe-card\">\n            <RecipeCard\n              title={recipe['title']}\n              field_images={recipe['field_images']}\n              field_summary={recipe['field_summary']}\n              openRecipe={openRecipe}\n              index={index}\n              ></RecipeCard>  \n          </div>\n      )}\n    </div>\n      : <h1>Loading</h1>\n  )\n}","import React, {Component} from 'react';\n\n\nexport class Header extends Component {\n\n  constructor(props) {\n    super(props)\n    this.navigate = this.navigate.bind(this)\n  }\n  \n  render() {\n    let { openPage } = this.props\n    return (\n      <header>\n        <h1>Recipes</h1>\n        <nav>\n          <a id=\"to-home\" href=\"#home\" onClick={this.navigate(openPage, 'home-page')} >Home</a>\n          <a id=\"to-recipes\" href=\"#recipes\" onClick={this.navigate(openPage, 'recipe-list')} >All Recipes</a>\n        </nav>\n    </header>\n    )\n  }\n\n  navigate(f, page) {\n    return () => {\n      f(page)\n    }\n  }\n}\n","import React, { Component } from 'react';\nimport './index.css'\n\nexport class HomePage extends Component {\n\n  constructor(props) {\n    super(props);\n    this.getHomePage = this.getHomePage.bind(this)\n  }\n\n  render() {\n\n    return(\n      <div>Hello</div>\n    )\n  }\n\n  getHomePage() {\n    \n  }\n}","import React, { Component } from 'react';\nimport './index.css'\n\nexport class SingleRecipe extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      results: this.props.results,\n      index: this.props.initialIndex\n    }\n    this.nextRecipe = this.nextRecipe.bind(this)\n    this.previousRecipe = this.previousRecipe.bind(this)\n  }\n\n  render() {\n    let {results, index} = this.state\n    let recipe = results[index]\n    let {title, field_ingredients, body} = recipe;\n    let ingredients = field_ingredients.split(',')\n    return(\n      <>\n        <h2>{ title }</h2>\n        <h3>Ingredients</h3>\n        <ul>\n        { ingredients.map((ingredient, index) => \n            <li key={index}>{ ingredient }</li>\n        )}\n        </ul>\n        <p dangerouslySetInnerHTML={{__html: body}}></p>\n        <button id=\"prev-recipe\" onClick={this.previousRecipe}>Previous Recipe</button>\n        <button id=\"next-recipe\" onClick={this.nextRecipe}>Next Recipe</button>\n      </>\n    )\n  }\n\n  nextRecipe() {\n    let {results, index} = this.state\n    if (results.length && index >= (results.length - 1)) {\n      index = 0;\n    }\n    else {\n      index++\n    }\n    window.location.hash = \"recipes/\" + index\n    this.setState({\n      index\n    })\n  }\n\n  previousRecipe() {\n    let {results, index} = this.state\n    if (results.length && index === 0) {\n      if (results.length !== 0) {\n        index = results.length - 1\n      }\n    }\n    else {\n      index--\n    }\n    window.location.hash = \"recipes/\" + index\n    this.setState({\n      index\n    })\n  }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport {\n  BASE_URL,\n  API\n} from './constants'\n\nimport { RecipeGrid } from './RecipeGrid'\nimport {Header } from './Header'\nimport { HomePage } from './HomePage';\nimport { SingleRecipe } from './SingleRecipe';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      results: null,\n      page: \"recipe-list\"\n    };\n    this.getRecipes = this.getRecipes.bind(this)\n    this.getBody = this.getBody.bind(this)\n    this.openRecipe = this.openRecipe.bind(this)\n    this.openPage = this.openPage.bind(this)\n  }\n\n  componentDidMount() {\n    this.getRecipes()\n  }\n\n  render() {\n    return (\n      <>\n      <Header openPage={this.openPage}></Header>\n      { this.getBody() }\n      </>\n    )\n    \n\n  }\n\n  getRecipes() {\n    fetch(`${BASE_URL}${API}/rec`).then(response => {\n      return response.json()  \n    }).then(results => {\n      this.setState({ results })\n    })\n  }\n\n  onRecipeClick(event) {\n\n  }\n\n  getBody() {\n    const { results, page, recipe_num } = this.state;    \n    switch(page) {\n      case \"recipe-list\":\n        window.location.hash = \"recipes\"\n        return (<><RecipeGrid results={results} openRecipe={this.openRecipe}/></> );\n      case \"home-page\":\n        window.location.hash = \"home\"\n        return (<><HomePage/></>)\n      case \"single-recipe\":\n        window.location.hash = `recipes/${recipe_num}`\n        return (<><SingleRecipe results={results} initialIndex={recipe_num}/></>)\n      default:\n        window.location.hash = \"home\"\n        return (<><HomePage/></>)\n    }\n  }\n  openRecipe(recipe_num) {\n    this.setState({page: \"single-recipe\", recipe_num})\n  }\n  // opens a page (all recipes or home page)\n  // opening a single recipe is separate (could become one in the future)\n  openPage(page) {\n    this.setState({page})\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}